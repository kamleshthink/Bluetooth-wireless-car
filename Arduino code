// Motor pins for L298N Motor Driver
const int motor1Pin1 = 2;   // IN1
const int motor1Pin2 = 3;   // IN2
const int motor2Pin1 = 4;   // IN3
const int motor2Pin2 = 5;   // IN4

// ENA and ENB (Speed control via PWM)
const int enableA = 9;  // ENA
const int enableB = 10; // ENB

char command;
int speed = 200;  // default speed (0-255)

void setup() {
  // Set motor pins as outputs
  pinMode(motor1Pin1, OUTPUT);
  pinMode(motor1Pin2, OUTPUT);
  pinMode(motor2Pin1, OUTPUT);
  pinMode(motor2Pin2, OUTPUT);
  pinMode(enableA, OUTPUT);
  pinMode(enableB, OUTPUT);

  // Initialize Serial for HC-05 Bluetooth
  Serial.begin(9600);

  // Initial speed
  analogWrite(enableA, speed);
  analogWrite(enableB, speed);
}

void loop() {
  if (Serial.available()) {
    command = Serial.read();

    // Set speed if numeric character is received (0 to 9)
    if (command >= '0' && command <= '9') {
      speed = map(command - '0', 0, 9, 0, 255);
      analogWrite(enableA, speed);
      analogWrite(enableB, speed);
    }

    // Movement controls
    switch (command) {
      case 'F': // Forward
        forward();
        break;
      case 'B': // Backward
        backward();
        break;
      case 'L': // Left
        left();
        break;
      case 'R': // Right
        right();
        break;
      case 'S': // Stop
        stopMotors();
        break;
      case 'G': // Forward Left
        forwardLeft();
        break;
      case 'I': // Forward Right
        forwardRight();
        break;
      case 'H': // Backward Left
        backwardLeft();
        break;
      case 'J': // Backward Right
        backwardRight();
        break;
    }
  }
}

// Movement functions
void forward() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void backward() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void left() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, HIGH);
  digitalWrite(motor2Pin1, HIGH);
  digitalWrite(motor2Pin2, LOW);
}

void right() {
  digitalWrite(motor1Pin1, HIGH);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, HIGH);
}

void forwardLeft() {
  analogWrite(enableA, speed / 2);
  analogWrite(enableB, speed);
  forward();
}

void forwardRight() {
  analogWrite(enableA, speed);
  analogWrite(enableB, speed / 2);
  forward();
}

void backwardLeft() {
  analogWrite(enableA, speed / 2);
  analogWrite(enableB, speed);
  backward();
}

void backwardRight() {
  analogWrite(enableA, speed);
  analogWrite(enableB, speed / 2);
  backward();
}

void stopMotors() {
  digitalWrite(motor1Pin1, LOW);
  digitalWrite(motor1Pin2, LOW);
  digitalWrite(motor2Pin1, LOW);
  digitalWrite(motor2Pin2, LOW);
}

